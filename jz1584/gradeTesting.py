import pandas as pd
from clean_save import cleanGrade  

def quantify(grade_list):
    """function code the letter:A,B,C in the grade_list to corresponding 
    numerical number 3,2,1, returns numerical list
    """
    numList=[]
    #create an empty list that will include numerical grades from grade_list 
    for i in grade_list:
        if i=='A':numList.append(3) 
        elif i=='B':numList.append(2) 
        elif i=='C':numList.append(1) #assign value to letter grade
    return numList


def test_grades(grade_list):
    """function computes the cumulative change of grades in each two 
    consecutive grades in grade_list,returns 1 if the cumulative change more than 0, 
    returns 0 if the cumulative change is equal to 0, returns -1 if cumulative change less than 0.
    """
    numList=quantify(grade_list)
    #print numList
    cum_change=0#initialize the cumulative change of grade in grade_list   
    for index in range(len(numList)-1):
        change=numList[index+1]-numList[index] 
        #compute the change for each two consecutive grades
        cum_change+=change
        #add up the change    
    if cum_change ==0: return 0
    if cum_change < 0: return -1
    if cum_change >0 : return 1
    
cleanGrade('DOHMH_New_York_City_Restaurant_Inspection_Results.csv')
df=pd.read_csv('clean.csv')
#reading the new dataset which is generated by clean_save.py into DataFrame df 

def test_restaurant_grades(camis_id):
    """function takes restaurant id as input, calculate the grade of 
    corresponding restaurant based dataframe series of grade in date order
    returns the final grades of the restaurant
    """
    camis_df=df[df.CAMIS==camis_id]
    #create new dateframe corresponding to inputed restaurant id
    sort_df=camis_df.sort_index(by=['GRADE DATE']) 
    sort_df=sort_df.sort_index(axis=0,ascending=False)
    #sort the dataFrame by column "GRADE DATE" from oldest date to newest date
    #print sort_df
    camis_series=sort_df['GRADE']#get a series of grade from the sorted dataFrame
    #print camis_series
    final_grade=test_grades(camis_series)
    return final_grade
 
 
def sum_boroGrade():
    boros=['STATEN ISLAND','BROOKLYN', 'BRONX', 'MANHATTAN', 'QUEENS']
    for boro in boros: 
        GradeDict={}
        GradeDict[boro]=0
        BORO_df=df[df.BORO==boro]#get borough dataFrame from  dataset
        id_series=BORO_df.CAMIS
        ids=set(id_series)
        for ID in ids:
            ind_Grade=test_restaurant_grades(ID)
            GradeDict[boro]+=ind_Grade
        print "The Borough of %s has the total grade: %d"%(boro,GradeDict[boro])

        
 
 
if __name__=="__main__":
    print test_grades(['A','A','A','B'])
    
    
    
